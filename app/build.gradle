buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.robolectric'

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        debug {
            //runProguard true
            proguardFiles 'proguard-rules.txt'
            testCoverageEnabled = true
        }
        release {
            //runProguard false
            proguardFiles 'proguard-rules.txt'
            testCoverageEnabled = false
        }
    }
    sourceSets {
        androidTest.setRoot('src/test')
    }
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }
    productFlavors {
    }
}

dependencies {
    // ================== LIBRARIES ======================
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    //Using the appcompat library is not necessary when the minsdk >= 14
    //compile 'com.android.support:appcompat-v7:+'

    //ignore lint complaining about an update: 21.+ is still in release candidate state
    compile 'com.android.support:support-v4:22.1.1'

    //for more information on the Butterknife injection framework
    //visit https://github.com/JakeWharton/butterknife
    compile 'com.jakewharton:butterknife:6.1.0'

    // for more information on the Crouton framework,
    // visit https://github.com/keyboardsurfer/Crouton
    //a fix for: Module version de.keyboardsurfer.android.widget:crouton:1.8.4 depends on libraries but is not a library itself
    compile('de.keyboardsurfer.android.widget:crouton:1.8.4@aar') {
        exclude group: 'com.google.android', module: 'support-v4'
    }

    // ================== TESTING LIBRARIES ======================
    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:3.0-rc2'

    testCompile 'org.bouncycastle:bcprov-jdk15on:1.50'
    testCompile 'com.jakewharton:butterknife:6.1.0'

    androidTestCompile 'org.robolectric:robolectric:3.0-rc2'

}

android.testOptions.unitTests.all {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    //exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}